#include"Controller.h"

//	static fp2  InputWeightsLayer1[MaxW_input1];
//   static fp2  RecurrentWeightsLayer1[MaxW_recur1];

//    static fp2  weights[hiddenUnitsLayer1];
    fp2  hiddenState[hiddenUnitsLayer1];
    fp2  cellState[hiddenUnitsLayer1];
    fp2  cellStateNext[hiddenUnitsLayer1];

/*    static fp2 biasLayer1[biasSize1];
    static fp2 forgetWeight[gateInWsize];
    static fp2 inputWeight[gateInWsize];
    static fp2 cellWeight[gateInWsize];
    static fp2 outputWeight[gateInWsize];

    static fp2 forgetReWeight[gateReWsize];
	static fp2 inputReWeight[gateReWsize];
	static fp2 cellReWeight[gateReWsize];
	static fp2 outputReWeight[gateReWsize];

	static fp2 forgetBias[hiddenUnitsLayer1];
	static fp2 inputBias[hiddenUnitsLayer1];
	static fp2 cellBias[hiddenUnitsLayer1];
	static fp2	outputBias[hiddenUnitsLayer1];
*/
	//test
    fp2  hiddenStateF[hiddenUnitsLayer1];

    fp2  hiddenStateI[hiddenUnitsLayer1];

    fp2  hiddenStateC[hiddenUnitsLayer1];

    fp2  hiddenStateO[hiddenUnitsLayer1];

    //

//	const float xSig[385] = {0,0.015625,0.03125,0.046875,0.0625,0.078125,0.09375,0.109375,0.125,0.140625,0.15625,0.171875,0.1875,0.203125,0.21875,0.234375,0.25,0.265625,0.28125,0.296875,0.3125,0.328125,0.34375,0.359375,0.375,0.390625,0.40625,0.421875,0.4375,0.453125,0.46875,0.484375,0.5,0.515625,0.53125,0.546875,0.5625,0.578125,0.59375,0.609375,0.625,0.640625,0.65625,0.671875,0.6875,0.703125,0.71875,0.734375,0.75,0.765625,0.78125,0.796875,0.8125,0.828125,0.84375,0.859375,0.875,0.890625,0.90625,0.921875,0.9375,0.953125,0.96875,0.984375,1,1.015625,1.03125,1.046875,1.0625,1.078125,1.09375,1.109375,1.125,1.140625,1.15625,1.171875,1.1875,1.203125,1.21875,1.234375,1.25,1.265625,1.28125,1.296875,1.3125,1.328125,1.34375,1.359375,1.375,1.390625,1.40625,1.421875,1.4375,1.453125,1.46875,1.484375,1.5,1.515625,1.53125,1.546875,1.5625,1.578125,1.59375,1.609375,1.625,1.640625,1.65625,1.671875,1.6875,1.703125,1.71875,1.734375,1.75,1.765625,1.78125,1.796875,1.8125,1.828125,1.84375,1.859375,1.875,1.890625,1.90625,1.921875,1.9375,1.953125,1.96875,1.984375,2,2.015625,2.03125,2.046875,2.0625,2.078125,2.09375,2.109375,2.125,2.140625,2.15625,2.171875,2.1875,2.203125,2.21875,2.234375,2.25,2.265625,2.28125,2.296875,2.3125,2.328125,2.34375,2.359375,2.375,2.390625,2.40625,2.421875,2.4375,2.453125,2.46875,2.484375,2.5,2.515625,2.53125,2.546875,2.5625,2.578125,2.59375,2.609375,2.625,2.640625,2.65625,2.671875,2.6875,2.703125,2.71875,2.734375,2.75,2.765625,2.78125,2.796875,2.8125,2.828125,2.84375,2.859375,2.875,2.890625,2.90625,2.921875,2.9375,2.953125,2.96875,2.984375,3,3.015625,3.03125,3.046875,3.0625,3.078125,3.09375,3.109375,3.125,3.140625,3.15625,3.171875,3.1875,3.203125,3.21875,3.234375,3.25,3.265625,3.28125,3.296875,3.3125,3.328125,3.34375,3.359375,3.375,3.390625,3.40625,3.421875,3.4375,3.453125,3.46875,3.484375,3.5,3.515625,3.53125,3.546875,3.5625,3.578125,3.59375,3.609375,3.625,3.640625,3.65625,3.671875,3.6875,3.703125,3.71875,3.734375,3.75,3.765625,3.78125,3.796875,3.8125,3.828125,3.84375,3.859375,3.875,3.890625,3.90625,3.921875,3.9375,3.953125,3.96875,3.984375,4,4.015625,4.03125,4.046875,4.0625,4.078125,4.09375,4.109375,4.125,4.140625,4.15625,4.171875,4.1875,4.203125,4.21875,4.234375,4.25,4.265625,4.28125,4.296875,4.3125,4.328125,4.34375,4.359375,4.375,4.390625,4.40625,4.421875,4.4375,4.453125,4.46875,4.484375,4.5,4.515625,4.53125,4.546875,4.5625,4.578125,4.59375,4.609375,4.625,4.640625,4.65625,4.671875,4.6875,4.703125,4.71875,4.734375,4.75,4.765625,4.78125,4.796875,4.8125,4.828125,4.84375,4.859375,4.875,4.890625,4.90625,4.921875,4.9375,4.953125,4.96875,4.984375,5,5.015625,5.03125,5.046875,5.0625,5.078125,5.09375,5.109375,5.125,5.140625,5.15625,5.171875,5.1875,5.203125,5.21875,5.234375,5.25,5.265625,5.28125,5.296875,5.3125,5.328125,5.34375,5.359375,5.375,5.390625,5.40625,5.421875,5.4375,5.453125,5.46875,5.484375,5.5,5.515625,5.53125,5.546875,5.5625,5.578125,5.59375,5.609375,5.625,5.640625,5.65625,5.671875,5.6875,5.703125,5.71875,5.734375,5.75,5.765625,5.78125,5.796875,5.8125,5.828125,5.84375,5.859375,5.875,5.890625,5.90625,5.921875,5.9375,5.953125,5.96875,5.984375,6};
//	const float xTan[385] = {0.25,0.265625,0.28125,0.296875,0.3125,0.328125,0.34375,0.359375,0.375,0.390625,0.40625,0.421875,0.4375,0.453125,0.46875,0.484375,0.5,0.515625,0.53125,0.546875,0.5625,0.578125,0.59375,0.609375,0.625,0.640625,0.65625,0.671875,0.6875,0.703125,0.71875,0.734375,0.75,0.765625,0.78125,0.796875,0.8125,0.828125,0.84375,0.859375,0.875,0.890625,0.90625,0.921875,0.9375,0.953125,0.96875,0.984375,1,1.015625,1.03125,1.046875,1.0625,1.078125,1.09375,1.109375,1.125,1.140625,1.15625,1.171875,1.1875,1.203125,1.21875,1.234375,1.25,1.265625,1.28125,1.296875,1.3125,1.328125,1.34375,1.359375,1.375,1.390625,1.40625,1.421875,1.4375,1.453125,1.46875,1.484375,1.5,1.515625,1.53125,1.546875,1.5625,1.578125,1.59375,1.609375,1.625,1.640625,1.65625,1.671875,1.6875,1.703125,1.71875,1.734375,1.75,1.765625,1.78125,1.796875,1.8125,1.828125,1.84375,1.859375,1.875,1.890625,1.90625,1.921875,1.9375,1.953125,1.96875,1.984375,2,2.015625,2.03125,2.046875,2.0625,2.078125,2.09375,2.109375,2.125,2.140625,2.15625,2.171875,2.1875,2.203125,2.21875,2.234375,2.25,2.265625,2.28125,2.296875,2.3125,2.328125,2.34375,2.359375,2.375,2.390625,2.40625,2.421875,2.4375,2.453125,2.46875,2.484375,2.5,2.515625,2.53125,2.546875,2.5625,2.578125,2.59375,2.609375,2.625,2.640625,2.65625,2.671875,2.6875,2.703125,2.71875,2.734375,2.75,2.765625,2.78125,2.796875,2.8125,2.828125,2.84375,2.859375,2.875,2.890625,2.90625,2.921875,2.9375,2.953125,2.96875,2.984375,3};
	const float tanH[177] = {0.244918662403709,0.259549214808827,0.274061588960766,0.288450212972739,0.302709729332108,0.316835001123366,0.330821117493628,0.344663398358572,0.358357398350786,0.371898910016385,0.385283966269472,0.398508842117517,0.411570055674022,0.424464368477894,0.437188785141712,0.44974055235365,0.46211715726001,0.474316325257367,0.486336017224962,0.498174426229455,0.509829973735257,0.521301305354577,0.532587286171919,0.543686995678149,0.554599722349382,0.565324957905875,0.575862391285789,0.586211902368224,0.596373555479242,0.606347592713803,0.616134427105526,0.625734635675147,0.635148952387287,0.644378261043901,0.653423588141347,0.662286095716634,0.670967074206874,0.679467935344479,0.687790205109085,0.695935516755651,0.703905603936621,0.711702293934519,0.719327501019833,0.726783219947561,0.734071519604342,0.741194536816722,0.748154470329735,0.754953574963682,0.761594155955765,0.768078563492066,0.774409187434214,0.780588452244058,0.786618812108698,0.79250274626724,0.798242754539887,0.80384135305908,0.809301070201781,0.814624442721248,0.819814012076096,0.824872320953883,0.829801909985959,0.834605314649922,0.839285062355586,0.843843669710098,0.848283639957513,0.852607460587903,0.856817601110895,0.860916510988344,0.864906617720742,0.868790325081861,0.872570011496069,0.876248028552715,0.879826699651985,0.883308318776638,0.886695149384052,0.889989423413092,0.893193340400352,0.89630906670044,0.899338734805046,0.90228444275565,0.905148253644866,0.907932195201519,0.9106382594547,0.913268402472186,0.915824544168762,0.918308568180101,0.92072232179806,0.923067615963351,0.925346225311741,0.927559888270051,0.929710307198413,0.931799148575377,0.933828043222592,0.935798586565984,0.937712338930443,0.939570825865212,0.941375538497287,0.943127933910295,0.94482943554642,0.946481433629114,0.948085285604406,0.949642316598796,0.951153819891786,0.952621057401251,0.954045260179949,0.955427628921549,0.956769334474705,0.958071518363745,0.959335293314682,0.960561743785307,0.961751926498222,0.962906870975765,0.964027580075817,0.965115030527589,0.966170173466547,0.967193934967674,0.968187216576371,0.969150895836318,0.9700858268137,0.970992840617236,0.971872745913509,0.97272632943714,0.97355435649539,0.974357571466812,0.975136698293628,0.975892440967527,0.976625484008611,0.977336492937277,0.978026114738814,0.978694978320548,0.97934369496139,0.979972858753654,0.980583047037052,0.98117482082478,0.981748725221639,0.982305289834139,0.982845029172576,0.983368443045052,0.983876016943457,0.984368222421423,0.984845517464278,0.985308346851046,0.98575714250853,0.986192323857556,0.98661429815143,0.987023460806687,0.987420195726215,0.987804875614849,0.988177862287512,0.988539506970016,0.988890150592618,0.989230124076444,0.989559748612883,0.989879335936068,0.990189188588556,0.990489600180334,0.990780855641252,0.991063231467018,0.991336995958872,0.991602409457056,0.991859724568208,0.992109186386796,0.992351032710726,0.992585494251228,0.99281279483716,0.993033151613839,0.993246775236521,0.993453870058657,0.99365463431503,0.993849260299904,0.99403793454029,0.994220837964453,0.994398146065758,0.99457002906199,0.994736652050231,0.994898175157427,0.99505475368673};
	const float sigM[385] = {0.5,0.50390617052908,0.507811864279204,0.511716604704165,0.515619915723016,0.519521321952093,0.523420348936324,0.527316523379567,0.531209373373756,0.535098428626611,0.538983220687684,0.542863283172505,0.546738151984614,0.55060736553524,0.554470464960427,0.558326994335374,0.562176500885798,0.566018535196101,0.569852651414157,0.57367840745251,0.577495365185812,0.581303090644313,0.585101154203231,0.588889130767832,0.59266659995407,0.596433146264625,0.600188359260205,0.603931833725958,0.607663169832892,0.611381973294151,0.615087855516066,0.61878043374385,0.622459331201855,0.626124177228303,0.629774607404413,0.63341026367784,0.637030794480383,0.640635854839898,0.64422510648637,0.64779821795211,0.651354864666054,0.654894729042128,0.658417500561683,0.661922875849994,0.665410558746814,0.668880260371009,0.672331699179286,0.675764601019048,0.679178699175393,0.682573734412324,0.685949455008192,0.689305616785446,0.692641983134736,0.695958325033453,0.699254421058758,0.702530057395205,0.705785027837011,0.709019133785093,0.712232184238947,0.715423995783473,0.718594392570856,0.721743206297598,0.724870276176825,0.727975448905978,0.731058578630005,0.734119526900183,0.737158162628683,0.740174362039016,0.743168008612481,0.746138993030751,0.749087213114727,0.752012573759797,0.754914986867628,0.75779437127464,0.760650652677288,0.763483763554292,0.76629364308596,0.769080237070728,0.771843497839075,0.774583384164923,0.777299861174691,0.779992900254107,0.782662478952938,0.785308580887758,0.787931195642895,0.790530318669675,0.793105951184112,0.795658100063154,0.798186777739621,0.800692002095954,0.803173796356902,0.805632188981255,0.808067213552763,0.810478908670322,0.812867317837573,0.815232489352,0.817574476193644,0.819893335913536,0.822189130521951,0.824461926376571,0.826711794070673,0.828938808321416,0.831143047858317,0.833324595312023,0.835483537103437,0.837619963333289,0.839733967672239,0.841825647251568,0.843895102554543,0.845942437308515,0.847967758377826,0.849971175657575,0.851952801968311,0.853912752951704,0.855851146967259,0.857768104990104,0.859663750509917,0.861538209431036,0.863391609973781,0.865224082577043,0.867035759802171,0.868826776238184,0.870597268408361,0.872347374678209,0.874077235164868,0.875786991647947,0.877476787481841,0.879146767509529,0.880797077977882,0.882427866454491,0.884039281746033,0.885631473818188,0.887204593717107,0.888758793492457,0.890294226122029,0.89181104543793,0.893309406054349,0.894789463296914,0.89625137313362,0.897695292107347,0.899121377269944,0.900529786117893,0.90192067652954,0.903294206703878,0.904650535100891,0.905989820383428,0.907312221360624,0.908617896932829,0.909907006038048,0.911179707599882,0.912436160476941,0.91367652341373,0.91490095499298,0.91610961358942,0.917302657324961,0.918480244025281,0.919642531177793,0.920789675890976,0.921921834855049,0.923039164303974,0.924141819978757,0.925229957092039,0.926303730293952,0.927363293639213,0.928408800555448,0.929440403812707,0.930458255494172,0.93146250696801,0.932453308860371,0.933430811029498,0.934395162540931,0.935346511643776,0.936285005748035,0.937210791402949,0.938124014276357,0.939024819135035,0.939913349825992,0.940789749258714,0.941654159388319,0.942506721199614,0.943347574692026,0.944176858865386,0.944994711706546,0.945801270176814,0.946596670200176,0.947381046652286,0.94815453335022,0.948917263042947,0.949669367402523,0.950410977015968,0.951142221377825,0.951863228883365,0.952574126822433,0.953275041373908,0.95396609760076,0.954647419445694,0.95531912972735,0.955981350137054,0.956634201236093,0.957277802453509,0.957912272084381,0.95853772728859,0.959154284090051,0.959762057376384,0.96036116089903,0.960951707273774,0.961533807981676,0.962107573370393,0.962673112655871,0.963230533924401,0.963779944135025,0.964321449122269,0.964855153599207,0.965381161160824,0.965899574287688,0.966410494349896,0.966914021611296,0.967410255233975,0.967899293282992,0.968381232731354,0.968856169465222,0.969324198289326,0.969785412932606,0.970239906054036,0.970687769248644,0.971129093053712,0.971563966955147,0.971992479394012,0.97241471777321,0.972830768464319,0.973240716814557,0.97364464715388,0.974042642802203,0.97443478607673,0.974821158299398,0.975201839804414,0.975576909945893,0.975946447105574,0.976310528700626,0.976669231191519,0.977022630089974,0.977370799966963,0.977713814460775,0.978051746285132,0.978384667237352,0.978712648206549,0.979035759181872,0.979354069260782,0.979667646657341,0.979976558710545,0.980280871892653,0.980580651817551,0.980875963249111,0.981166870109565,0.981453435487883,0.981735721648143,0.982013790037908,0.982287701296588,0.982557515263795,0.982823290987682,0.983085086733273,0.983342959990771,0.983596967483837,0.983847165177859,0.984093608288185,0.984336351288332,0.984575447918159,0.984810951192016,0.98504291340685,0.985271386150277,0.985496420308618,0.985718066074889,0.985936372956754,0.986151389784435,0.98636316471857,0.986571745258031,0.986777178247695,0.986979509886157,0.987178785733406,0.987375050718436,0.987568349146814,0.987758724708193,0.987946220483763,0.98813087895366,0.988312742004306,0.988491850935697,0.988668246468638,0.988841968751916,0.989013057369407,0.989181551347137,0.989347489160274,0.989510908740062,0.989671847480695,0.989830342246127,0.989986429376827,0.990140144696461,0.990291523518526,0.990440600652909,0.99058741041239,0.990731986619086,0.990874362610819,0.99101457124744,0.99115264491707,0.991288615542295,0.991422514586288,0.991554373058874,0.991684221522526,0.991812090098304,0.991938008471728,0.992062005898593,0.992184111210711,0.992304352821608,0.992422758732139,0.99253935653606,0.992654173425523,0.992767236196521,0.992878571254265,0.992988204618503,0.993096161928778,0.993202468449627,0.993307149075715,0.993410228336919,0.993511730403343,0.993611679090279,0.993710097863107,0.993807009842145,0.993902437807425,0.993996404203428,0.994088931143756,0.994180040415741,0.994269753485008,0.994358091499977,0.994445075296309,0.994530725401301,0.994615062038222,0.994698105130598,0.994779874306442,0.994860388902431,0.994939667968034,0.995017730269579,0.995094594294278,0.995170278254196,0.995244800090167,0.995318177475666,0.995390427820626,0.995461568275205,0.995531615733509,0.995600586837263,0.995668497979436,0.995735365307813,0.995801204728528,0.995866031909548,0.995929862284104,0.995992711054089,0.996054593193398,0.996115523451234,0.996175516355363,0.996234586215326,0.996292747125614,0.99635001296879,0.99640639741858,0.996461913942912,0.996516575806919,0.996570396075905,0.996623387618261,0.996675563108344,0.996726935029328,0.996777515675997,0.996827317157515,0.996876351400147,0.996924630149952,0.996972164975432,0.997018967270145,0.997065048255286,0.997110418982226,0.997155090335021,0.997199073032879,0.997242377632605,0.997285014530995,0.997326993967211,0.997368326025115,0.997409020635571,0.997449087578713,0.99748853648619,0.997527376843365};

void Controller(fp1 in_stream[90], fp2 inputWeight[gateInWsize], fp2 forgetWeight[gateInWsize], fp2 cellWeight[gateInWsize], fp2 outputWeight[gateInWsize], fp2 inputReWeight[gateReWsize], fp2 forgetReWeight[gateReWsize], fp2 cellReWeight[gateReWsize], fp2 outputReWeight[gateReWsize], fp2  weights[hiddenUnitsLayer1], fp2 inputBias[hiddenUnitsLayer1], fp2 forgetBias[hiddenUnitsLayer1], fp2 cellBias[hiddenUnitsLayer1],  fp2 outputBias[hiddenUnitsLayer1], fp2 fcbias[1], fp2 out_stream[90], int new_net) //use BRAM port
{


	int a,b,c,f,i,j,k,l,m,n,o,p,q,R,s,t,w;
	k = 1;
	l = 1;
//	AXI_VAL2 out2;

/*
	#ifndef __SYNTHESIS__
	    cout<< "sigmoid(0.1): "<< sig<fp1,fp1>(0.1) << "\n";
	    cout<< "sigmoid(0.2): "<< sig<fp1,fp1>(0.2) << "\n";
	    cout<< "sigmoid(-0.2): "<< sig<fp1,fp1>(-0.2) << "\n";
	    cout<< "sigmoid(-0.1): "<< sig<fp1,fp1>(-0.1) << "\n";

	    cout<< "tanh(0.1): "<< tan<fp1,fp1>(0.1) << "\n";
	    cout<< "tanh(0.2): "<< tan<fp1,fp1>(0.2) << "\n";
	    cout<< "tanh(-0.2): "<< tan<fp1,fp1>(-0.2) << "\n";
	    cout<< "tanh(-0.1): "<< tan<fp1,fp1>(-0.1) << "\n";
	    cout<< "convert(-0.1): "<< convert(-0.1) << "\n";
	    cout<< "convert(-0.2): "<< convert(-0.2) << "\n";
	#endif


		AXI_VAL1 in1, in2, in3, in4, in5;
		AXI_VAL2 out1;
*/
	//	fp1  inputs[INPUT_SIZE];


	fp1  inputsF[INPUT_SIZE];
	fp1  inputsI[INPUT_SIZE];
	fp1  inputsC[INPUT_SIZE];
	fp1  inputsO[INPUT_SIZE];
	///fp1  output_pred[INPUT_SIZE];
	/*
	////int MaxW_input1 = 4*timeSteps*hiddenUnitsLayer1;
	//int MaxW_input2 = 4*hiddenUnitsLayer1*hiddenUnitsLayer2;

	////int MaxW_recur1 = 4*hiddenUnitsLayer1*hiddenUnitsLayer1;
	//int MaxW_recur2 = 4*hiddenUnitsLayer1*hiddenUnitsLayer2;

	////int biasSize1 = 4*hiddenUnitsLayer1+1;



	//fp1  sumfgt[hiddenUnitsLayer1];
	//fp1  sumigt[hiddenUnitsLayer1];
	//fp1  sumcgt[hiddenUnitsLayer1];
	//fp1  sumogt[hiddenUnitsLayer1];

    fp2  InputWeightsLayer1[MaxW_input1];
    //fp2  InputWeightsLayer2[MaxW_input2];
    fp2  RecurrentWeightsLayer1[MaxW_recur1];
    //fp2  RecurrentWeightsLayer2[MaxW_recur2];

    fp2  weights[hiddenUnitsLayer1];

    fp2  hiddenState[hiddenUnitsLayer1];
    fp2  cellState[hiddenUnitsLayer1];
    fp2  cellStateNext[hiddenUnitsLayer1];

    fp2  biasLayer1[biasSize1];
    //fp2  biasLayer2[4*hiddenUnitsLayer2+1];

    fp2 forgetWeight[gateInWsize];
    fp2 inputWeight[gateInWsize];
    fp2 cellWeight[gateInWsize];
    fp2 outputWeight[gateInWsize];

    fp2 forgetReWeight[gateReWsize];
	fp2 inputReWeight[gateReWsize];
	fp2 cellReWeight[gateReWsize];
	fp2 outputReWeight[gateReWsize];

	fp2 forgetBias[hiddenUnitsLayer1];
	fp2 inputBias[hiddenUnitsLayer1];
	fp2 cellBias[hiddenUnitsLayer1];
	fp2	outputBias[hiddenUnitsLayer1];
	 */

	fp2 finalOut[hiddenUnitsLayer1];
	fp2 final;

    fp1 forget[maxHidden];
    fp1 input[maxHidden];
    fp1 cell[maxHidden];
    fp1 output[maxHidden];

    //fp1 *fgt, *in, *out, *cel;

   // fgt = forget;
   // cel = cell;
   // in = input;
   // out = output;




//     INPUTS: for(i=0;i<INPUT_SIZE;i++)
//     {
    	 //if(i<Config->Ninputs)
//    	 if(i<INPUT_SIZE)
//    	 {
//				 in_stream>>in1;
			//	 inputs[i] = in1.data;

		 //test
		 inputsF[0] = in_stream[0];
		 inputsI[0] = in_stream[0];
		 inputsC[0] = in_stream[0];
		 inputsO[0] = in_stream[0];
		 //
//				 cout<< "inputs: "<<i<< " -- " <<  inputs[i] <<'\n';
//    	 }
//    	 else
//    		 break;

//    }



	 if(new_net==1)
	 {
//		 region2:
//		 {
		 initial:for(b=0;b<(hiddenUnitsLayer1);b++)
		 {
			hiddenState[b]=0;
			cellState[b]=0;

			//test
			hiddenStateF[b]=0;


			hiddenStateI[b]=0;


			hiddenStateC[b]=0;


			hiddenStateO[b]=0;

			//

			cellStateNext[b]=0;
#ifndef __SYNTHESIS__
			cout<< "hiddenState:"<<b<< " -- " <<hiddenState[b] <<'\n';
			cout<< "cellState:"<<b<< " -- " <<cellState[b] <<'\n';
#endif
		 }



	 }
	 else
	 {
		 nextState:for(b=0;b<(hiddenUnitsLayer1);b++)
		 	 		   {
							 //in_stream>>in1;
							 hiddenState[b]  = in_stream[l];
							//test
							 hiddenStateF[b] = in_stream[l];
							 hiddenStateI[b] = in_stream[l];
							 hiddenStateC[b] = in_stream[l];
							 hiddenStateO[b] = in_stream[l];
							 //
							 //in_stream>>in1;
							 cellState[b] = in_stream[l+1];
							 l = l+2;
							 //test

							 //
//							 cellStateNext[b]=0;
#ifndef __SYNTHESIS__
							cout<< "hiddenState:"<<b<< " -- " <<hiddenState[b] <<'\n';
							cout<< "cellState:"<<b<< " -- " <<cellState[b] <<'\n';
#endif
			/*				cout<< "cellStateNext:"<<b<< " -- " <<cellStateNext[b] <<'\n';
			 */
		 	 		   }
	 }



//-------------------------------end feeding weights-------------------------------------------------

//------------------------------- start feeding inputs-----------------------------------------------
/*float inforget = inputs[0];
float ininput = inputs[0];
float inouput = inputs[0];
float incell = inputs[0];*/

	 TimeSteps:for(t=0;t<INPUT_SIZE;t++)
	 //TimeSteps:for(t=0;t<2;t++)
	 	 	   {
					 final = 0;
					 if(t<INPUT_SIZE)
					 {
						 //region2:for(k=0;k<1;k++)
						 //{

							/*
							 forgetGate(inputs, forget, t, forgetWeight, forgetReWeight, hiddenState, forgetBias, timeSteps, hiddenUnitsLayer1);
							 inputGate(inputs, input, t, inputWeight, inputReWeight, hiddenState, inputBias, timeSteps, hiddenUnitsLayer1);
							 cellGate(inputs, cell, t, cellWeight, cellReWeight, hiddenState, cellBias, timeSteps, hiddenUnitsLayer1);
							 outputGate(inputs, output, t, outputWeight, outputReWeight, hiddenState, outputBias, timeSteps, hiddenUnitsLayer1);
							 */

							 forgetGate(inputsF, forget, t, forgetWeight, forgetReWeight, hiddenStateF, forgetBias, timeSteps, hiddenUnitsLayer1);
							 inputGate(inputsI, input, t, inputWeight, inputReWeight, hiddenStateI, inputBias, timeSteps, hiddenUnitsLayer1);
							 cellGate(inputsC, cell, t, cellWeight, cellReWeight, hiddenStateC, cellBias, timeSteps, hiddenUnitsLayer1);
							 outputGate(inputsO, output, t, outputWeight, outputReWeight, hiddenStateO, outputBias, timeSteps, hiddenUnitsLayer1);


					region2:
					{
						 cellCandidate:for(c=0;c<hiddenUnitsLayer1;c++)
										 {
											 cellStateNext[c] = input[c]*cell[c];
						//					 cout<< "cellStateNext:"<<c<< " -- " <<cellStateNext[c] <<'\n';
										 }

						 cellStatusOld:for(c=0;c<hiddenUnitsLayer1;c++)
										 {
											 cellState[c] = forget[c]*cellState[c];
						//					 cout<< "cellStatusOld:"<<c<< " -- " <<cellState[c] <<'\n';
										 }

						 cellStatusNew:for(c=0;c<hiddenUnitsLayer1;c++)
										 {
											 cellState[c] = cellState[c]+cellStateNext[c];
						//					 cout<< "cellStatusNew:"<<c<< " -- " <<cellState[c] <<'\n';
										 }

						 hiddenStatus:for(c=0;c<hiddenUnitsLayer1;c++)
									 {
										 hiddenState[c] = output[c]*tan<fp1,fp1>(cellState[c]);
					//					 cout<< "hiddenStatus:"<<c<< " -- " <<hiddenState[c] <<'\n';
									 }
					}

						 outStatus:for(c=0;c<hiddenUnitsLayer1;c++)
									 {
										 finalOut[c] = hiddenState[c]*weights[c];
					//					 cout<< "FCweights:"<<c<< " -- " <<weights[c] <<'\n';
					//					 cout<< "outStatus:"<<c<< " -- " <<finalOut[c] <<'\n';
									 }

						 result: for(l=0;l<hiddenUnitsLayer1;l++)
								 {
									 final = final+finalOut[l];

								 }
					//	 	 	 cout<< "result:"<<l<< " -- " <<final <<'\n';
					//	 	 	 cout<< "FCbiases:" << biasLayer1[4*hiddenUnitsLayer1]<<'\n';
					//			 output_pred[t] = final+biasLayer1[hiddenUnitsLayer1*4];
					//			 out1.data = output_pred[t];
					//			 out1.last = 0;//(t==INPUT_SIZE-1);
								 out_stream[t]=final+fcbias[0];
#ifndef __SYNTHESIS__
								 cout<< "pred"<<"["<<t<<"]:"<<out_stream[t] <<'\n';
#endif
					  }
	 	 	   }


	 	 OUTstream:for(q=0;q<hiddenUnitsLayer1;q++)
  	 	 {
			//if(q<hiddenUnitsLayer1)
			//{
			//	out2.data = hiddenState[q];
			//	out2.last = 0;
				out_stream[k] = hiddenState[q];

			//	out2.data = cellState[q];
			//	out2.last = (q==hiddenUnitsLayer1-1);;
				out_stream[k+1] = cellState[q];
				k=k+2;
			//}
			//else
			//	break;
  	 	 }

	 	 return;
}
//---------------------------------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------------------------------

void forgetGate(fp1  *In1, fp1 *ot1, int numInputs1,  fp2  *InW1, fp2  *ReW1, fp2  *hid1, fp2 *b1, int isize1, int hsize1)
{
		int i,j,k,l,m,n,p;
		fp1 s1,s2;
		//fp1 sum[hsize];
		fp1 sum1[hsize1];
		fp1 sum2[hsize1];
		fp1 inMul1[1];
		fp1 inMul2[hsize1];

		inputLayerf:for(i=0;i<hsize1;i++)
					{
						s1=0;
						inputMultf:for(j=0;j<isize1;j++)
										{
//											cout<< "\nforgetWeights:" << InW[j+i*isize] <<'\n';
											inMul1[j]=In1[j+numInputs1]*InW1[j+i*isize1]; //;In[j]*InW[j*isize+i];
										}
						inputAccumf:for(k=0;k<isize1;k++)
										{
											s1 = s1+inMul1[k];
										}
						sum1[i] = s1;
					}

		hiddenLayerf:for(l=0;l<hsize1;l++)
					{
						s2=0;
						hiddenMultf:for(m=0;m<hsize1;m++)
									{
//										cout<< "\nforgetRE_Weights:" << ReW[m+l*hsize] <<'\n';
										inMul2[m]=hid1[m]*ReW1[m+l*hsize1];
									}
						hiddenAccumf:for(n=0;n<hsize1;n++)
									{
										s2 = s2+inMul2[n];
									}
						sum2[l] = s2;
					}

		finalf:for (p=0;p<hsize1;p++)
				{
					ot1[p] = sig<fp1,fp1>(sum1[p] + sum2[p]+b1[p]);
//					cout<< "\nforgetGate:" << ot[p] <<'\n';
				}
		//return 0;
};

void inputGate(fp1  *In2, fp1 *ot2, int numInputs2, fp2  *InW2, fp2  *ReW2, fp2  *hid2, fp2 *b2, int isize2, int hsize2)
{
		int c,i,j,k,l,m,n,p;
		fp1 s3,s4;
		fp1 sum3[hsize2];
		fp1 sum4[hsize2];
		//fp1 sum[hsize];
		fp1 inMul3[1];
		fp1 inMul4[hsize2];

		inputLayeri:for(i=0;i<hsize2;i++)
					{
						s3=0;
						inputMulti:for(j=0;j<isize2;j++)
								{
									//cout<< "\nInput:" << In[j+numInputs] <<'\n';
									inMul3[j]=In2[j+numInputs2]*InW2[j+i*isize2];
								}
						inputAccumi:for(k=0;k<isize2;k++)
								{
									s3 = s3+inMul3[k];
								}
						sum3[i] = s3;
					}

		hiddenLayeri:for(l=0;l<hsize2;l++)
					{
						s4=0;
						hiddenMulti:for(m=0;m<hsize2;m++)
									{
										//cout<< "\nhidden:" << hid[m] <<'\n';
										inMul4[m]=hid2[m]*ReW2[m+l*hsize2];
									}
						hiddenAccumi:for(n=0;n<hsize2;n++)
									{
										s4 = s4+inMul4[n];
									}
						sum4[l] = s4;
					}

		finali:for (p=0;p<hsize2;p++)
				{
					ot2[p] = sig<fp1,fp1>(sum3[p] + sum4[p]+b2[p]);
//					cout<< "\ninputGate:" << ot[p] <<'\n';
				}


		//return 0;
};

void cellGate(fp1  *In3, fp1 *ot3, int numInputs3, fp2  *InW3, fp2  *ReW3, fp2  *hid3, fp2 *b3, int isize3, int hsize3)
{
	int c,i,j,k,l,m,n,p;
	fp1 s5,s6;
	fp1 sum5[hsize3];
	fp1 sum6[hsize3];
	//fp1 sum[hsize];
	fp1 inMul5[1];
	fp1 inMul6[hsize3];
	//candidate layer

	inputLayerc:for(i=0;i<hsize3;i++)
				{
					s5=0;
					inputMultc:for(j=0;j<isize3;j++)
								{
//									cout<< "\n cell Weights:" << InW[j+i*isize] <<'\n';
									inMul5[j]=In3[j+numInputs3]*InW3[j+i*isize3];
								}
					inputAccumi:for(k=0;k<isize3;k++)
								{
									s5 = s5+inMul5[k];
								}
					sum5[i] = s5;
				}

	hiddenLayerc:for(l=0;l<hsize3;l++)
				{
					s6=0;
					hiddenMultc:for(m=0;m<hsize3;m++)
								{
//									cout<< "\n cell RE_Weights:" << ReW[m+l*hsize] <<'\n';
									inMul6[m]=hid3[m]*ReW3[m+l*hsize3];
								}
					hiddenAccumc:for(n=0;n<hsize3;n++)
								{
									s6 = s6+inMul6[n];
								}
					sum6[l] = s6;
				}

	finalc:for (p=0;p<hsize3;p++)
			{
				ot3[p] = tan<fp1,fp1>(sum5[p] + sum6[p]+b3[p]);
//				cout<< "\ncellGate:" << ot[p] <<'\n';
			}

	//return 0;


};

void outputGate(fp1  *In4, fp1 *ot4, int numInputs4, fp2  *InW4, fp2  *ReW4, fp2  *hid4, fp2 *b4, int isize4, int hsize4)
{
		int i,j,k,l,m,n,p;
		fp1 s7,s8;
		//fp1 sum[hsize];
		fp1 sum7[hsize4];
		fp1 sum8[hsize4];
		fp1 inMul7[1];
		fp1 inMul8[hsize4];

		inputLayero:for(i=0;i<hsize4;i++)
					{
						s7=0;
						inputMulto:for(j=0;j<isize4;j++)
									{
										inMul7[j]=In4[j+numInputs4]*InW4[j+i*isize4];
									}
						inputAccumo:for(k=0;k<isize4;k++)
									{
										s7 = s7+inMul7[k];
									}
						sum7[i] = s7;
					}

		hiddenLayero:for(l=0;l<hsize4;l++)
					{
						s8=0;
						hiddenMulto:for(m=0;m<hsize4;m++)
									{
										inMul8[m]=hid4[m]*ReW4[m+l*hsize4];
									}
						hiddenAccumo:for(n=0;n<hsize4;n++)
									{
										s8 = s8+inMul8[n];
									}
						sum8[l] = s8;
					}

		finalo:for (p=0;p<hsize4;p++)
				{
					ot4[p] = sig<fp1,fp1>(sum7[p] + sum8[p]+b4[p]);
//					cout<< "\noutputGate:" << ot[p] <<'\n';
				}
		//return 0;
};


/*template<class T, class U>
T RELU(U x)
{
	if(x<0)
		return 0;
	else
		return x;
};
*/
template<class T, class U>
T sig(U x)
{
	return 1/(1+exp(-x));
};

template<class T, class U>
T tan(U x)
{
	//return (exp(-2*x)-1)/(exp(-2*x)+1);
	return (1 - 2*sig<fp1,fp1>(-2*x));
};

// PWL method-01
/*
template<class T, class U>
T sig(U x)
{
	if (x>2.5)
		return 1;
	else if (x>-2.5 && x<2.5)
		return (0.2*x+0.5);
	else
		return 0;

};

template<class T, class U>
T tan(U x)
{
	if (x>=1)
		return 1;
	else if (x>-1 && x<1)
		return x;
	else
		return (-1);
};
*/

/*template<class T, class U>
T tan(U x)
{
	 return (1-2*sig<fp1,fp1>(-2*x));
};*/


// PWL method-02
/*template<class T, class U>
T sig(U x)
{
	  U temp = x;

	  if(temp < 0)
	  {
		  x = -x;
	  }
	  if(x >= 5)
	  {
		  // 1
		  x = 1;
	  }
	  else if(x >= 2.375 &&  x < 5)
	  {
		  //0.03125 * |x| + 0.84375
		  x = 0.03125*x + 0.84375;
	  }
	  else if(1 <= x  && x < 2.375)
	  {
		  // 0.125 * |x| + 0.625
		  x = 0.125*x + 0.625;
	  }
	  else if(0 <=x && x<1)
	  {
		  // 0.25 * |x| + 0.5
		  x = 0.25*x + 0.5;
	  }
	  if(temp < 0)
	  {
		  //1 - sig(x)
		  x = 1 - x;
	  }

	  return x;
};*/



/*template<class T, class U>
T tan(U x)
{
	  U in = (-2)*x;

	  U temp = in;

	  if(in < 0)
	  {
		  in = -in;
	  }
	  if(in > 5)
	  {
		  // 1
		  x = 1;
	  }
	  else if(in >= 2.375 &&  in<5)
	  {
		  //0.03125 * |x| + 0.84375
		  x = 0.03125*in + 0.84375;
	  }
	  else if(1 <= in  && in <2.375)
	  {
		  // 0.125 * |x| + 0.625
		  x = 0.125*in + 0.625;
	  }
	  else if(0 <= in && in <1)
	  {
		  // 0.25 * |x| + 0.5
		  x = 0.25*in + 0.5;
	  }
	  if(temp < 0)
	  {
		  //1 - sig(x)
		  x = 1 - x;
	  }
	  x = 1 - ((2)*x);

	  return x;
};*/


/*
// LOOK UP TABLE METHOD-01
template<class T, class U>
T sig(U x)
{
	U temp = x;
	if(temp<0)
	{
		x = (-1)*x;
	}

	if(x>=0 && x<=6)
	{
		sigLUT: for(int j=0;j<384;j++)
		{
			if(x>=xSig[j] && x< xSig[j+1])
			{
				x = sigM[j];
				break;
			}
		}
		if(temp<0)
				x = 1-x;
	}
	else
		x = 1;



	return x;
};

template<class T, class U>
T tan(U x)
{
	U temp = x;
	if(temp<0)
		x = (-1)*x;

	if(x>=0 && x<0.25)
	{
		x = 1*x;
		if(temp<0)
			x = -x;
	}
	else if(x>=0.25 && x<=3)
	{
		tanLUT: for(int i=0;i<176;i++)
		{
			if(x>=xTan[i] && x<xTan[i+1])
			{
				x = tanH[i];
				break;
			}
		}
		if(temp<0)
				x = -x;
	}

	else
	{
		x = 1;
	}



	return x;
};
*/

/*
// LOOK UP TABLE METHOD-02
template<class T, class U>
T sig(U x)
{
	U temp1 = x;
	convert temp2 = x;
	if(temp1<0)
	{
		x = (-1)*x;
	}


	if(x>=0 && x<=6)
	{
		x = sigM[temp2];
		if(temp1<0)
			x = 1-x;
	}
	else
		x = 1;



	return x;
};

template<class T, class U>
T tan(U x)
{
	U temp1 = x;
	convert temp2 = x;
	if(temp1<0)
		x = (-1)*x;

	if(x>=0 && x<0.25)
	{
		x = 1*x;
		if(temp1<0)
			x = (-1)*x;
	}
	else if(x>=0.25 && x<=3)
	{
		x = tanH[temp2];
		if(temp1<0)
			x = (-1)*x;

	}

	else
	{
		x = 1;
	}



	return x;
};
*/

 //---------------------------------
 //------------------------------------------------------------------------------------------

